/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */


// https://central.sonatype.com/ -- Acá se pueden buscar los jars 

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    
    //Esto es para crear un Fat Jar
    // https://imperceptiblethoughts.com/shadow/introduction/#benefits-of-shadow
    // Genera dentro del directorio build/distributions un file que se llama -shadow.tar el cual tiene 1 solo -jar 
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    
    //Plugin para compilar nativo con graalvm
    id 'org.graalvm.buildtools.native' version '0.10.2'
    
    //Para TeaVM
    // https://www.teavm.org/docs/tooling/gradle.html
    id "org.teavm" version "0.8.1"
    
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    
    /* -- Si pongo esta configuración parece que baja los sources y el javadoc, no lo probé.
    mavenCentral() {
        artifactTypes {
            artifactType("source", "jar", "sources")
            artifactType("doc", "jar", "javadoc")
        }
    }    
    */
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    //Fer: Lo saco, no se por que estaba esto...
    //implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.eclipse.jetty:jetty-server:11.0.13'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    //https://www.slf4j.org/codes.html#noProviders 
    //-- es para evitar el warning de que no hay proveedor de log, alguna dependencia lo debe usar, creo que es jetty o el package de jakarta
    /*
     *  SLF4J: No SLF4J providers were found.
     *   SLF4J: Defaulting to no-operation (NOP) logger implementation
     *   SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
     * 
    */
    implementation 'org.slf4j:slf4j-nop:2.0.7'

}

application {
    // Define the main class for the application.
    mainClass = 'gradle.example.App'
}

jar {
  manifest {
    attributes 'Main-Class': 'gradle.example.App'
  }
}

graalvmNative {
     binaries.all {
         resources.autodetect()
         
         //En teoría esto es para activar los features preview (virtual threads) en momento de compilar
         //https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html 
         buildArgs.add('--enable-preview')
        
     }

     toolchainDetection = true
}

/*
 * Tuve que agregarle esto, porque cada vez que corría un run, parece que la tarea quedaba
 * cacheada como que ya estaba lista y luego la próxima vez que la corría, no la ejecutaba.
 * Al inficarle que la tarea run no está up-to-date, la corre siempre, es raro que esto no venga
 * así por default.
 * Me di cuenta al ejecutar un gradlew run --info en donde decía: Skipping task ':app:run' as it is up-to-date 
*/

tasks.named('run') {
    outputs.upToDateWhen { false }
}
/* lo saco cuando deshabilito el plugin */
teavm.js {
    addedToWebApp = true
    mainClass = "gradle.example.TeaExample"
    
    // this is also optional, default value is <project name>.js
    targetFileName = "example.js"
}

